
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>MathBox - Inverse Kinematics</title>

  <!--
    This example shows labelling of axes.
  -->

  <script type="text/javascript" charset="utf-8" src="mathbox/domready.js"></script>
  <script type="text/javascript" charset="utf-8" src="mathbox/mathbox.js"></script>

  <script type="text/javascript" charset="utf-8">
    DomReady.ready(function () {
      if (location.href.match(/^file:/)) {
        document.getElementById('info').style.opacity = 1;
        document.getElementById('info').innerHTML = "Sorry. This example does not work when accessed using file://. Please use an http:// host and try again.";
      }
    });
  </script>

  <script type="text/javascript" charset="utf-8">

  var brown = 0x924000,
      orangered = 0xc03000,
      red = 0xc02050,
      green = 0x50c020,
      inside = 0xf9ffe8,
      darkgreen = 0x509000,
      darkergreen = 0x284800,
      blue = 0x3080ff,
      lightblue = 0x8bb8ff,
      darkblue = 0x17408f,
      surfacered = 0xdf5000,
      purple = 0xd040b0,
      darkpurple = 0x95227c,
      royal = 0x5528A0,
      gold = 0xefc040,
      slate = 0x5070A0,
      darkslate = 0x45628d,
      cyan = 0x30A0B0,
      darkcyan = 0x24876f,
      lightgray = 0xe0e0e0;
      gray = 0xc0c0c0;
      darkgray = 0xa0a0a0,
      orange = 0xFF9703,
      darkorange = 0xc46a02,
      white = 0xffffff,
      black = 0x404040;

  var armLength = 172;
  var forearmLength = 172;
  var bicepLength = 172;
      // \class{mj-red2}{\alpha} = \tan^{-1} \frac{y}{x} - \cos^{-1} \frac{a^2+c^2-b^2}{2ac}  \qquad
      // \class{mj-orange2}{\beta} = \tan^{-1} \frac{y}{x} + \cos^{-1} \frac{b^2+c^2-a^2}{2bc}


  var anglesFor = function(x, y) {
    var radius = Math.sqrt(x*x + y*y);
    var heading = Math.atan2(y, x)
    return {
      bicep: heading - Math.acos(
        (bicepLength*bicepLength + radius*radius - forearmLength*forearmLength) /
        (2 * bicepLength * radius)
      ),
      forearm: heading + Math.acos(
        (forearmLength*forearmLength + radius*radius - bicepLength*bicepLength) /
        (2 * forearmLength * radius)
      )
    }
  }

  var curvyThetas = function(dt) {
    return {
      bicep: -π/16 + π/8*Math.sin(τ*dt/10),
      forearm: π/2 + π/4*Math.sin(τ*dt/23)
    };
  }

  var regionEdges = function(xmin, ymin, xmax, ymax) {
    var xspan = Math.abs(xmax - xmin);
    var yspan = Math.abs(ymax - ymin);
    return function(t) {
      t *= (xspan + yspan) * 2;

      if(t < yspan) return {x: xmax,     y: ymin + t};
      t -= yspan;
      if(t < xspan) return {x: xmax - t, y: ymax};
      t -= xspan;
      if(t < yspan) return {x: xmin,     y: ymax - t};
      t -= yspan;
      if(t < xspan) return {x: xmin + t, y: ymin};
      t -= xspan;

      return {x: xmax, y: ymin};
    }
  }

  var badRect = function(dt) {
    var f = regionEdges(-π/16, π/2 - π/8, -π/16 + π/8, π/2 + π/8);
    var a = f(dt);
    return {bicep: a.x, forearm: a.y}
    // dt *= 4;
    // var region = function(tx, ty) {
    //   return {
    //     bicep: -π/16 - π/8*tx,
    //     forearm: π/2 + π/8*ty
    //   };
    // }
    // if(dt < 1)
    //   return region(0, dt);
    // else if(--dt < 1)
    //   return region(dt, 1);
    // else if(--dt < 1)
    //   return region(1, 1 - dt);
    // else if(--dt < 1)
    //   return region(1 - dt, 0);
    // else
    //   return region(0, 0);
  }

  var goodRect = function(dt) {
    var f = regionEdges(48, 96, 240, 128);
    var a = f(dt);
    return anglesFor(a.x, a.y)
  }

  var WAVY_STEP = 4;
  var BADRECT_STEP = 5;
  var GOODRECT_STEP = 8;
  var getThetas = function() {
    if(director.step < WAVY_STEP)
      return {bicep: -π/16, forearm: π/2};

    else if(director.step < BADRECT_STEP) {
      var dt = director.clock(WAVY_STEP);
      return curvyThetas(dt);
    }
    else if(director.step < GOODRECT_STEP) {
      var dt = director.clock(BADRECT_STEP);
      return badRect(dt / 4);
    }
    else {
      var dt = director.clock(GOODRECT_STEP);
      return goodRect(dt / 4);
    }
  }

  function bicepPosAt(angles) {
    var sin = Math.sin;
    var cos = Math.cos;
    return [armLength * cos(angles.bicep), 0, armLength * sin(angles.bicep)];
  }
  function forearmPosAt(angles) {
    var sin = Math.sin;
    var cos = Math.cos;
    var b = bicepPosAt(angles)
    return [b[0] + armLength * cos(angles.forearm), 0, b[2] + armLength * sin(angles.forearm)];
  }

  window.mathboxScript = [
    // Nothing
    [
      ['add', 'axis', {
        axis: 0,
        color: darkgray,
        lineWidth: 2,
        size: 10,
        tickUnit: 8,
        tickScale: 2
      }],
      ['add', 'axis', {
        axis: 2,
        color: darkgray,
        lineWidth: 2,
        size: 10,
        tickUnit: 8,
        tickScale: 2
      }]
    ],

    //Draw vectors
    [
      ['add', 'vector', {
        id: 'bicep',
        color: darkgreen,
        lineWidth: 4,
        size: 16,
        expression: function(i, end) {
          if(!end)
            return [0, 0, 0];
          else
            return bicepPosAt(thetas);
        },
        zIndex: 2
      }],
      ['add', 'vector', {
        id: 'forearm',
        color: green,
        lineWidth: 4,
        size: 16,
        expression: function(i, end) {
          if(!end)
            return bicepPosAt(thetas);
          else
            return forearmPosAt(thetas);
        },
        zIndex: 2
      }],
      ['add', 'curve', {
        n: 1,
        id: 'pen',
        color: blue,
        pointSize: 15,
        points: true,
        line: false,
        expression: function(_, i) {
          return forearmPosAt(thetas);
        }
      }]
    ],

    //Draw angles
    [
      //zero line
      ['add', 'vector', {
        id: 'parallel',
        color: darkgray,
        size: 10,
        expression: function(i, end) {
          var at = bicepPosAt(thetas);
          if(end)
            return [at[0] + 50, 0, at[2]];
          else
            return at;
        }
      }],

      //arcs
      ['add', 'surface', {
        id: 'bicepAngle',
        color: orangered,
        opacity: 0.5,
        shaded: false,
        size: 10,
        domain: [[20, 40], [0, 1]],
        n: [2, 256],
        expression: function(r, x) {
          var t = thetas;
          return [r*Math.cos(x*t.bicep), 0, r*Math.sin(x*t.bicep)]
        }
      }, {'delay': 300}],

      ['add', 'surface', {
        id: 'forearmAngle',
        color: orange,
        opacity: 0.5,
        shaded: false,
        size: 10,
        domain: [[20, 40], [0, 1]],
        n: [2, 256],
        expression: function(r, x) {
          var t = thetas;
          var at = bicepPosAt(t);
          return [at[0] + r*Math.cos(x*t.forearm), 0, at[2]+ r*Math.sin(x*t.forearm)]
        }
      }, {'delay': 300}]
    ],
    [],

    //Draw surface
    [
      ['add', 'curve', {
        id: 'badRect',
        color: black,
        n: 201,
        lineWidth: 2,
        live: true,
        domain: [0, 4],
        expression: function(t) {
          return forearmPosAt(badRect(Math.min(t, director.clock(BADRECT_STEP)) / 4));
        },
        zIndex: 1
      }]
    ],
    [
      ['add', 'surface', {
        id: 'warp',
        color: gray,
        shaded: false,
        line: true,
        mesh: false,
        lineWidth: 1,
        zIndex: -1,
        domain: [[-π/2, π/2], [-π/2, π]],
        n: [33, 49],
        expression: function(a, b) {
          if(a > b - 0.05*π) a = b - 0.05*π;
          if(a < b - 0.95*π) a = b - 0.95*π;
          var p = forearmPosAt({bicep: a, forearm: b});
          if(p[0] < 0) p[0] = 0;
          if(p[2] < 0) p[2] = 0;
          return p;
        },
      }]
    ],
    [
      ['remove', '#badRect'],
      ['remove', '#warp']
    ],

    //Draw surface
    [
      ['add', 'grid', {
        id: 'grid',
        axis: [0, 2],
        color: gray,
        show: [ true, true ],
        lineWidth: 1,
        tickUnit: [8, 8], 
        ticks: [36, 24],
        tickScale: [2, 2]
      }],
      ['add', 'curve', {
        id: 'goodRect',
        color: black,
        n: 201,
        live: true,
        lineWidth: 2,
        domain: [0, 4],
        expression: function(t) {
          return forearmPosAt(goodRect(Math.min(t, director.clock(GOODRECT_STEP)) / 4));
        },
        zIndex: 1
      }],
    ],
    //Draw surface
    [
      // ['add', 'curve', {
      //   color: red,
      //   n: 201,
      //   live: true,
      //   domain: [-10, 0],
      //   expression: function(t) {
      //     return forearmPosAt(curvyThetas(Math.max(0, director.clock(WAVY_STEP) + t)));
      //   }
      // }],
     
    ]
  ]
  /**
   * Bootstrap
   */
  DomReady.ready(function() {
    ThreeBox.preload([
      'mathbox/snippets.glsl.html',
    ], function (){


      // MathBox boilerplate
      var mathbox = window.mathbox = mathBox({
        cameraControls: false,
        cursor:         true,
        controlClass:   ThreeBox.OrbitControls,
        elementResize:  true,
        fullscreen:     true,
        screenshot:     true,
        stats:          false,
        scale:          1,
      });

      mathbox.world().loop().hookPreRender(function() {
        window.thetas = getThetas();
      });
      mathbox.start();

      // Set up director
      var script = window.mathboxScript;
      var director = window.director = new MathBox.Director(mathbox, script);

      if(window.top != window) {
        window.addEventListener("message", function(e) {
          var d = e.data;
          if(d.type == 'step') {
            director.go(d.step);
          }
        }, false);
      }
      else {
        // Arrow controls
        // Controls for stand-alone
        window.addEventListener('keydown', function (e) {
          if (e.keyCode == 38 || e.keyCode == 37) director.back();
          else if (e.keyCode == 40 || e.keyCode == 39) director.forward();
          else {
            return;
          }

          document.getElementById('info').style.opacity = '0';
        });
      }

      // Viewport camera/setup
      mathbox
        // Cartesian viewport
        .viewport({
          type: 'cartesian',
          range: [[0, 288], [0, 50], [0, 192]],
          scale: [288, 50, -192]
        })
        .camera({
          orbit: 1100,
          theta: π/2 - .0001
        })
        .transition(600)        

    });
  });
  </script>

  <style type="text/css" media="screen">
    html, body { height: 100%; }
    body { margin: 0; padding: 0 }
    canvas { display: block }

    #info {
      position: absolute;
      left: 50%;
      bottom: 50px;
      z-index: 20;

      width: 300px;
      margin-left: -150px;

      padding: 25px;
      background: rgba(0, 0, 0, .5);
      color: #fff;

      font-family: "Lucida Grande", sans-serif;
      font-size: 16px;
      text-align: center;

      border-radius: 3px;
      text-shadow: 0px 1px 0px rgba(0, 0, 0, .4);

      opacity: 0;
    }

    #info kbd {
      background: #aaa;

      box-shadow: 0px 1px 1px rgba(0, 0, 0, .3);
      border-radius: 3px;
      padding: 3px;
      margin: 3px;

      font-family: inherit;
    }
  </style>

</head>
<body>
  <div id="info"></div>
</body>
</html>
